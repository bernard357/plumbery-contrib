---

information:
  - "Swarm of pingers connected to a MQTT broker and to a Kibana dashboard"

parameters:

  locationId:
    information:
      - "the target data centre for this deployment"
    type: locations.list
    default: AU10

  domainName:
    information:
      - "the name of the network domain to be deployed"
    type: str
    default: PingerSwarmFox

  networkName:
    information:
      - "the name of the Ethernet VLAN to be deployed"
    type: str
    default: PingerSwarmNetwork

links:
  documentation: https://github.com/DimensionDataCBUSydney/plumbery-contrib/tree/master/logging/mqtt-swarm
  credit: https://github.com/athoune/swarming

defaults:

  # deploy a limited number of nodes by default -- add blueprint 'bees' to deploy more pingers
  #
  blueprints: queen drones

  # the same network domain is used at various facilities
  #
  domain:
    name: "{{ parameter.domainName }}"
    description: "Demonstration of MQTT with multiple pingers"
    ipv4: auto

  # the same ethernet configuration is used at various facilities
  #
  ethernet:
    name: "{{ parameter.networkName }}"
    subnet: 10.0.0.0

  # default settings for a remote probe
  #
  bee:

    description: "#swarm #bee #mqtt #ubuntu"

    information:
      - "a pinger controlled via MQTT"
      - "troubleshoot with:"
      - "$ ssh ubuntu@{{ node.public }}"

    appliance: 'Ubuntu 14'

    glue:
      - internet 22

    monitoring: essentials

    cloud-config:

      hostname: "{{ node.name }}"

      packages:
        - ntp
        - mosquitto-clients
        - git
        - python-pip

      write_files:

        - path: /root/hosts.awk
          content: |
            #!/usr/bin/awk -f
            /^{{ node.private }}/ {next}
            /^{{ node.ipv6 }}/ {next}
            /^{{ {{ parameter.locationId }}::queen.ipv6 }}/ {next}
            {print}
            END {
             print "{{ node.private }}    {{ node.name }}"
             print "{{ node.ipv6 }}    {{ node.name }}"
             print "{{ {{ parameter.locationId }}::queen.ipv6 }}    queen"
            }

        - path: /etc/init/swarm-pinger.conf
          content: |
            description "Swarm pinger"
            start on runlevel [2345]
            stop on runlevel [!2345]
            start on startup
            exec /home/ubuntu/swarming/swarming.py queen

      runcmd:

        - echo "===== Handling ubuntu identity"
        - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
        - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
        - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
        - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

        - echo "===== Updating /etc/hosts"
        - cp -n /etc/hosts /etc/hosts.original
        - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

        - echo "===== Installing swarming software"
        - cd /home/ubuntu
        - git clone https://github.com/bernard357/swarming.git
        - cd swarming
        - pip install -r requirements.txt

        - echo "===== Running swarming software"
        - service swarm-pinger start

  cloud-config:

    ssh_keys:
      rsa_private: |
        {{ rsa_private.key }}
      rsa_public: "{{ rsa_public.key }}"

    users:
      - default

      - name: ubuntu
        sudo: 'ALL=(ALL) NOPASSWD:ALL'
        ssh-authorized-keys:
          - "{{ rsa_public.key }}"
          - "{{ rsa_public.local }}"

      - name: root
        sudo: 'ALL=(ALL) NOPASSWD:ALL'
        ssh-authorized-keys:
          - "{{ rsa_public.key }}"
          - "{{ rsa_public.local }}"

    disable_root: false
    ssh_pwauth: false

---

locationId: "{{ parameter.locationId }}"

blueprints:

  - queen:

      ethernet:
        accept:
          - "AP3::{{ parameter.networkName }}"
          - "AP4::{{ parameter.networkName }}"
          - "AP5::{{ parameter.networkName }}"
          - "AU11::{{ parameter.networkName }}"
          - "EU6::{{ parameter.networkName }}"
          - "EU8::{{ parameter.networkName }}"
          - "NA9::{{ parameter.networkName }}"
          - "NA12::{{ parameter.networkName }}"

      nodes:

        - queen: # the MQTT server

            description: "#swarm #queen #mqtt #ubuntu"

            information:
              - "a MQTT broker to control a swarm of pingers"
              - "$ ssh ubuntu@{{ node.public }}"
              - "change target addresses with something like the following:"
              - '$ mosquitto_pub -t watch -m "free.fr yahoo.fr yahoo.cn" -q 1'
              - "check the flow of pings with:"
              - '$ mosquitto_sub -t "ping/+" -v'

            appliance: 'Ubuntu 14'

            glue:
              - internet 22

            monitoring: essentials

            cloud-config:

              hostname: "{{ node.name }}"

              apt_sources:
                - source: "ppa:mosquitto-dev/mosquitto-ppa"

              packages:
                - ntp
                - mosquitto
                - mosquitto-clients
                - git
                - python-pip

              write_files:

                - path: /root/hosts.awk
                  content: |
                    #!/usr/bin/awk -f
                    /^{{ node.private }}/ {next}
                    /^{{ queen.ipv6 }}/ {next}
                    /^{{ dashboard.ipv6 }}/ {next}
                    /^{{ NA9::bee-NA9.ipv6 }}/ {next}
                    {print}
                    END {
                     print "{{ node.private }}    {{ node.name }}"
                     print "{{ queen.ipv6 }}    queen"
                     print "{{ dashboard.ipv6 }}    dashboard"
                     print "{{ NA9::bee-NA9.ipv6 }}    bee-NA9"
                    }

              runcmd:

                - echo "===== Handling ubuntu identity"
                - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
                - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
                - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
                - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

                - echo "===== Updating /etc/hosts"
                - cp -n /etc/hosts /etc/hosts.original
                - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

                - echo "===== Installing swarming software"
                - cd /home/ubuntu
                - git clone https://github.com/bernard357/swarming.git
                - cd swarming
                - pip install -r requirements.txt


        - dashboard: # the Kibana and Elasticsearch engine

            description: "#swarm #dashboard #kibana #ubuntu"

            information:
              - "a web dashboard to visualize pings:"
              - "http://{{ dashboard.public }}"
              - "authenticate with 'dashboard' and '{{ dashboard.secret }}'"
              - "troubleshoot with:"
              - "$ ssh ubuntu@{{ node.public }}"
              - "check the feeding of elasticsearch with:"
              - "$ curl 'http://localhost:9200/_cat/indices?v'"

            appliance: 'Ubuntu 14'
            cpu: 2
            memory: 3

            disks:
              - 1 50 standard

            glue:
              - internet 22 80

            monitoring: essentials

            cloud-config:

              hostname: "{{ node.name }}"

              bootcmd:

                # remove apache
                - apt-get remove apache2 -y
                - apt-get autoremove -y

                # automate acceptance of oracle licence
                - echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
                - echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 seen true" | sudo debconf-set-selections

              apt_sources:
                - source: "ppa:mosquitto-dev/mosquitto-ppa"
                - source: "ppa:webupd8team/java"

              packages:
                - ntp
                - mosquitto-clients
                - git
                - oracle-java8-installer
                - python-pip
                - nginx
                - apache2-utils

              write_files:

                - path: /root/hosts.awk
                  content: |
                    #!/usr/bin/awk -f
                    /^{{ node.private }}/ {next}
                    /^{{ queen.ipv6 }}/ {next}
                    /^{{ dashboard.ipv6 }}/ {next}
                    /^{{ NA9::bee-NA9.ipv6 }}/ {next}
                    {print}
                    END {
                     print "{{ node.private }}    {{ node.name }}"
                     print "{{ queen.ipv6 }}    queen"
                     print "{{ dashboard.ipv6 }}    dashboard"
                     print "{{ NA9::bee-NA9.ipv6 }}    bee-NA9"
                    }

                - path: /etc/nginx/sites-available/default.swarm
                  content: |
                    server {
                        listen 80;

                        server_name {{ node.public }};

                        auth_basic "Restricted Access";
                        auth_basic_user_file /etc/nginx/htpasswd.users;

                        location / {
                            proxy_pass http://localhost:5601;
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade $http_upgrade;
                            proxy_set_header Connection 'upgrade';
                            proxy_set_header Host $host;
                            proxy_cache_bypass $http_upgrade;
                        }
                    }

                - path: /etc/init/swarm-indexer.conf
                  content: |
                    description "Swarm indexer"
                    start on runlevel [2345]
                    stop on runlevel [!2345]
                    start on startup
                    exec /home/ubuntu/swarming/indexer.py queen

              runcmd:

                - echo "===== Growing LVM with added disk"
                - pvcreate /dev/sdb
                - vgextend rootvol00 /dev/sdb
                - lvextend -l +100%FREE /dev/mapper/rootvol00-rootlvol00
                - resize2fs /dev/mapper/rootvol00-rootlvol00

                - echo "===== Handling ubuntu identity"
                - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
                - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
                - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
                - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

                - echo "===== Updating /etc/hosts"
                - cp -n /etc/hosts /etc/hosts.original
                - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

                - echo "===== Installing Elasticsearch, Kibana"
                - cd /root
                - wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
                - echo "deb http://packages.elastic.co/elasticsearch/2.x/debian stable main" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list
                - echo "deb http://packages.elastic.co/kibana/4.4/debian stable main" | sudo tee -a /etc/apt/sources.list.d/kibana-4.4.x.list
                - apt-get update
                - apt-get install elasticsearch kibana
                - update-rc.d elasticsearch defaults 95 10
                - service elasticsearch start
                - update-rc.d kibana defaults 96 9
                - service kibana start

                - echo "===== Securing web access"
                - cp -n /etc/nginx/sites-available/default /etc/nginx/sites-available/default.original
                - cp /etc/nginx/sites-available/default.swarm /etc/nginx/sites-available/default
                - htpasswd -cb /etc/nginx/htpasswd.users dashboard {{ dashboard.secret }}
                - service nginx restart

                - echo "===== Installing swarming software"
                - cd /home/ubuntu
                - git clone https://github.com/bernard357/swarming.git
                - cd swarming
                - pip install -r requirements.txt

                - echo "===== Running swarming software"
                - service swarm-indexer restart

  - drones:

      nodes:
        - bee-AU10:
            default: bee

---
locationId: AP3

blueprints:

  - drones:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-AP3:
            default: bee

---
locationId: AP4

blueprints:

  - bees:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-AP4:
            default: bee

---
locationId: AP5

blueprints:

  - bees:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-AP5:
            default: bee

---
locationId: AU11

blueprints:

  - drones:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-AU11:
            default: bee

---
locationId: EU6

blueprints:

  - drones:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-EU6:
            default: bee

---
locationId: EU8

blueprints:

  - bees:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-EU8:
            default: bee

---
locationId: NA9

blueprints:

  - bees:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-NA9:
            default: bee

---
locationId: NA12

blueprints:

  - drones:

      ethernet:
        accept:
          - "{{ parameter.locationId }}::{{ parameter.networkName }}"

      nodes:
        - bee-NA12:
            default: bee
