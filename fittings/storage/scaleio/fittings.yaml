---

information:
  - "ScaleIO cluster on 3 nodes"

parameters:

  locationId:
    information:
      - "the target data centre for this deployment"
    type: locations.list
    default: EU7

  domainName:
    information:
      - "the name of the network domain to be deployed"
    type: str
    default: ScaleioFox

  networkName:
    information:
      - "the name of the Ethernet VLAN to be deployed"
    type: str
    default: ScaleioNetwork

  cpuPerNode:
    information:
      - "the quantity of CPU given to one ScaleIO node"
    type: [4..32]
    default: 2

  memoryPerNode:
    information:
      - "the quantity of RAM given to one ScaleIO node, in GB"
    type: [8..256]
    default: 4

  diskPerNode:
    information:
      - "the quantity of storage given to one ScaleIO node, in GB"
    type: [100..1000]
    default: 500

links:
  documentation: https://github.com/DimensionDataCBUSydney/plumbery-contrib/tree/master/fittings/storage/scaleio
  credit: https://github.com/djannot/scaleio-docker

defaults:

  domain:
    name: "{{ parameter.domainName }}"
    ipv4: auto

  ethernet:
    name: "{{ parameter.networkName }}"
    subnet: 10.0.1.0

  docker-node:

    appliance: 'CentOS 6'

    cpu: "{{ parameter.cpuPerNode }}"
    memory: "{{ parameter.memoryPerNode }}"

    disks:
      - "1 {{ parameter.diskPerNode }} economy"

    monitoring: essentials

  cloud-config:

    hostname: "{{ node.name }}"

    packages:
      - ntp
      - tar
      - wget
      - unzip
      - libaio
      - numactl
      - mutt
      - python
      - python-paramiko
      - java-1.6.0-openjdk
      - which

    write_files:

      - path: /root/hosts.awk
        content: |
          #!/usr/bin/awk -f
          /^{{ node1.private }}/ {next}
          /^{{ node2.private }}/ {next}
          /^{{ node3.private }}/ {next}
          {print}
          END {
           print "{{ node1.private }}    node1"
           print "{{ node2.private }}    node2"
           print "{{ node3.private }}    node3"
          }

    runcmd:

      - echo "===== Updating /etc/hosts"
      - cp -n /etc/hosts /etc/hosts.original
      - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

      - echo "===== Handling centos identity"
      - cp -n /etc/ssh/ssh_host_rsa_key /home/centos/.ssh/id_rsa
      - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/centos/.ssh/id_rsa.pub
      - chown centos:centos /home/centos/.ssh/*

      - echo "===== Updating the system"
      - wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
      - wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
      - rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm
      - yum -y install bash-completion

      - echo "===== Fetching EMC ScaleIO packages"
      - mkdir -p /opt/emc/scaleio/siinstall
      - cd /tmp

      - wget -q http://downloads.emc.com/emc-com/usa/ScaleIO/ScaleIO_Linux_1.latest.zip
      - unzip ScaleIO_Linux_1.latest.zip
      - unzip ScaleIO_1.32.3_RHEL6_Download.zip
      - cp ScaleIO_1.32.3_RHEL6_Download/* /opt/emc/scaleio/siinstall
      - unzip ScaleIO_1.32.3_Gateway_for_Linux_Download.zip
      - yes | cp ScaleIO_1.32.3_Gateway_for_Linux_Download/* /opt/emc/scaleio/siinstall

#      - wget -q http://downloads.emc.com/emc-com/usa/ScaleIO/ScaleIO_Linux_v2.0.zip
#      - unzip ScaleIO_Linux_v2.0.zip
#      - unzip ScaleIO_2.0.0_RHEL6_Download.zip
#      - cp ScaleIO_2.0.0_RHEL6_Download/* /opt/emc/scaleio/siinstall
#      - unzip ScaleIO_2.0.0_Gateway_for_Linux_Download.zip
#      - yes | cp ScaleIO_2.0.0_Gateway_for_Linux_Download/* /opt/emc/scaleio/siinstall

    ssh_keys:
      rsa_private: |
        {{ rsa_private.key }}
      rsa_public: "{{ rsa_public.key }}"

    users:
      - default

      - name: centos
        sudo: 'ALL=(ALL) NOPASSWD:ALL'
        ssh-authorized-keys:
          - "{{ rsa_public.key }}"
          - "{{ rsa_public.local }}"

    disable_root: false
    ssh_pwauth: true

---

locationId: "{{ parameter.locationId }}"

blueprints:

  - cluster:

      nodes:

        - node1:
            default: docker-node

            information:
              - "ScaleIO Primary MDM and SDS and API gateway"
              - "http://{{ node.public }}"
              - "use password: {{ cluster.secret }}"
              - "ssh centos@{{ node.public }}"
              - "cat /var/log/cloud-init-output.log"

            glue:
              - internet icmp 22 80 443

            cloud-config:

              runcmd:

                - echo "===== Installing ScaleIO software"
                - umount /dev/shm
                - mount -t tmpfs -o rw,nosuid,nodev,noexec,relatime,size=524288k shm /dev/shm
                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-mdm-*.x86_64.rpm
                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sds-*.x86_64.rpm
                - MDM_IP={{ node1.private }} rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sdc-*.x86_64.rpm
                - GATEWAY_ADMIN_PASSWORD={{ cluster.secret }} rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-gateway-*.rpm
                - sed -i 's/mdm.ip.addresses=.*/mdm.ip.addresses={{ node1.private }},{{ node2.private }}/' /opt/emc/scaleio/gateway/webapps/ROOT/WEB-INF/classes/gatewayUser.properties
                - sed -i 's/gateway-admin.password=.*/gateway-admin.password={{ cluster.secret }}/' /opt/emc/scaleio/gateway/webapps/ROOT/WEB-INF/classes/gatewayUser.properties
                - service scaleio-gateway restart

                - echo "===== Setting primary MDM"
                - scli --mdm --add_primary_mdm --primary_mdm_ip node1 --accept_license
                - sleep 1m

                - echo "===== Setting password"
                - scli --login --username admin --password admin
                - scli --set_password --old_password admin --new_password {{ cluster.secret }}
                - scli --login --username admin --password {{ cluster.secret }}

                - echo "===== Adding secondary MDM"
                - scli --add_secondary_mdm --mdm_ip node1 --secondary_mdm_ip node2
                - sleep 20

                - echo "===== Adding tie-break MDM"
                - scli --add_tb --mdm_ip node1 --tb_ip node3
                - sleep 20

                - echo "===== Switching to cluster mode"
                - scli --switch_to_cluster_mode --mdm_ip node1

                - echo "===== Configuring domain, pool"
                - scli --add_protection_domain --mdm_ip node1 --protection_domain_name domain1
                - scli --add_storage_pool --protection_domain_name domain1 --storage_pool_name pool1

                - echo "===== Adding SDS participating to the cluster"
                - scli --sds --add_sds --mdm_ip node1 --sds_ip node3 --sds_ip_role all --protection_domain_name domain1 --storage_pool_name pool1 --device_path /dev/sdb --sds_name sds1 --no_test --force_clean --i_am_sure
                - scli --sds --add_sds --mdm_ip node1 --sds_ip node1 --sds_ip_role all --protection_domain_name domain1 --storage_pool_name pool1 --device_path /dev/sdb --sds_name sds2 --no_test --force_clean --i_am_sure
                - scli --sds --add_sds --mdm_ip node1 --sds_ip node2 --sds_ip_role all --protection_domain_name domain1 --storage_pool_name pool1 --device_path /dev/sdb --sds_name sds3 --no_test --force_clean --i_am_sure

                - echo "===== Adding volume"
                - scli --add_volume --protection_domain_name domain1 --storage_pool_name pool1 --size_gb 400 --volume_name volume1

                - echo "===== Mapping volume to all SDC"
                - scli --mdm_ip node1 --map_volume_to_sdc --volume_name volume1 --sdc_ip node1 --allow_multi_map
                - scli --mdm_ip node1 --map_volume_to_sdc --volume_name volume1 --sdc_name node2 --allow_multi_map
                - scli --mdm_ip node1 --map_volume_to_sdc --volume_name volume1 --sdc_name node3 --allow_multi_map

        - node2:
            default: docker-node

            information:
              - "ScaleIO Secondary MDM and SDS"
              - "ssh centos@{{ node.public }}"

            glue:
              - internet icmp 22

            cloud-config:

              runcmd:

                - echo "===== Installing ScaleIO software"
                - umount /dev/shm
                - mount -t tmpfs -o rw,nosuid,nodev,noexec,relatime,size=524288k shm /dev/shm

                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-mdm-*.x86_64.rpm
                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sds-*.x86_64.rpm
                - MDM_IP={{ node1.private }} rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sdc-*.x86_64.rpm

        - node3:
            default: docker-node

            information:
              - "ScaleIO Primary MDM and SDS and API gateway"
              - "ssh centos@{{ node.public }}"

            glue:
              - internet icmp 22

            cloud-config:

              runcmd:

                - echo "===== Installing ScaleIO software"
                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-tb-*.x86_64.rpm
                - rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sds-*.x86_64.rpm
                - MDM_IP={{ node1.private }} rpm -Uvh /opt/emc/scaleio/siinstall/EMC-ScaleIO-sdc-*.x86_64.rpm
